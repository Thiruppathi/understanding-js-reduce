{"name":"Understanding-js-reduce","tagline":"","body":"# Understand ``Array.reduce()``\r\n\r\nThis repository contains simple examples and snippets to understand ``Array.reduce()``\r\n\r\n## Reduce Introduction\r\n\r\n```\r\nvar data = [100,200,300];\r\n\r\nvar reducer = function(accumulator, item) {\r\n  return accumulator + item;\r\n};\r\n\r\nvar initialValue = 0;\r\n\r\nvar total = data.reduce(reducer, initialValue);\r\n\r\nconsole.log('Sum of the array', data, 'is: ', total);\r\n```\r\n\r\n## Array To Object\r\n\r\n```\r\nvar votes = [\r\n  'Rajini',\r\n  'Rajini',\r\n  'Kamal',\r\n  'Vijay',\r\n  'Vikram',\r\n  'PowerStar',\r\n  'Kamal',\r\n  'Kamal',\r\n  'Cocunut Sreenivasan',\r\n  'Rajini',\r\n  'JK Riteesh',\r\n  'Mike Mohan',\r\n  'Rajini',\r\n  'Rajini',\r\n  'Rajini',\r\n  'Mike Mohan'\r\n];\r\n\r\n\r\nvar reducer = function(result, actor) {\r\n  if (!(result[actor])) {\r\n    result[actor] = 1;\r\n  } else {\r\n    result[actor]++;\r\n  }\r\n  return result;\r\n};\r\n\r\n\r\nvar initialValue = {};\r\n\r\nvar pollResult = votes.reduce(reducer, initialValue);\r\n\r\nconsole.log('Nadigar Sangam Result', pollResult);\r\n\r\n```\r\n\r\n## Common Patterns\r\n\r\n```\r\n/* Common Patterns when using Map, Reduce, filter\r\nUsing reduce can save execution time */\r\n\r\nvar bigData = [];\r\nfor (var i = 0; i < 1000000; i++) {\r\n  bigData[i] = i;\r\n}\r\n\r\nconsole.time('BigData Filter');\r\nvar filterBigData = bigData.filter(function(i) {\r\n  return (i % 2 === 0);\r\n}).map(function(j) {\r\n  return j * 2;\r\n});\r\nconsole.timeEnd('BigData Filter');\r\n\r\n\r\nconsole.time('BigData Reduce');\r\nvar reducer = function(accumulator, item) {\r\n  if (item % 2 === 0) {\r\n    accumulator.push(item * 2);\r\n  }\r\n  return accumulator;\r\n};\r\n\r\nvar reduceBigData = bigData.reduce(reducer, []);\r\nconsole.timeEnd('BigData Reduce');\r\n\r\n```\r\n\r\n## Additional Reducer Arguments\r\n\r\n```\r\n/** Additional Args of reduce\r\n * 1. accumulator\r\n * 2. item\r\n * 3. index\r\n * 4. array\r\n */\r\n\r\nvar reducer = function(accumulator, item, index, array) {\r\n  var intermediaryValue = accumulator + item;\r\n  return intermediaryValue;\r\n}\r\n\r\nvar data = [1, 2, 3, 4, 5, 6, 7, 3, 3, 5, 2, 3, 5];\r\n\r\nconsole.time('reducer');\r\nvar sum = data.reduce(reducer, 0);\r\nconsole.timeEnd('reducer');\r\nconsole.log('Sum:', sum, 'Mean:', sum / data.length);\r\n\r\nvar reducer2 = function(accumulator, item, index, array) {\r\n  var intermediaryValue = accumulator + item;\r\n  if (index === (array.length - 1)) {\r\n    return intermediaryValue / array.length;\r\n  }\r\n  return intermediaryValue;\r\n}\r\nconsole.time('reducer Effective');\r\n\r\nvar mean = data.reduce(reducer2, 0);\r\nconsole.timeEnd('reducer Effective');\r\nconsole.log('Sum:', sum, 'Mean:', mean);\r\n\r\n```\r\n\r\n## Common Mistakes\r\n\r\n```\r\n// 1. Always pass an initialValue\r\n\r\n// 2. Always return the accumulator\r\n\r\nvar data = [100, 200, 300];\r\n\r\nvar reducer = function(accumulator, item) {\r\n  console.log('typeof accumulator', typeof accumulator);\r\n  return accumulator + item;\r\n};\r\n\r\nvar initialValue = 0;\r\n\r\nvar total = data.reduce(reducer, initialValue);\r\n\r\nconsole.log('Sum of the array', data, 'is: ', total);\r\n\r\n\r\nconsole.log('---------------------------------');\r\n\r\n\r\nvar votes = [\r\n  'Rajini',\r\n  'Rajini',\r\n  'Kamal',\r\n  'Vijay',\r\n  'Vikram',\r\n  'PowerStar',\r\n  'Kamal',\r\n  'Mike Mohan'\r\n];\r\n\r\n\r\nvar voteReducer = function(result, actor) {\r\n  if (!(result[actor])) {\r\n    result[actor] = 1;\r\n  } else {\r\n    result[actor]++;\r\n  }\r\n  console.log('typeof accumulator', typeof result);\r\n\r\n  return result;\r\n};\r\n\r\n\r\nvar initialValue = {};\r\n\r\nvar pollResult = votes.reduce(voteReducer, initialValue);\r\n\r\nconsole.log('Nadigar Sangam Result', pollResult);\r\n\r\n```\r\n\r\n## Flatten - FlatMap - Reduce Right\r\n\r\n```\r\nvar data = [1, 2, 3, 4, \"5\"];\r\n\r\nvar reducer = function(accumulator, item) {\r\n  return accumulator + item;\r\n};\r\n\r\nvar initialValue = 0;\r\n\r\nvar total = data.reduceRight(reducer, initialValue);\r\n\r\nconsole.log('Sum of the array', data, 'is: ', total);\r\n\r\n```\r\n\r\n## Array Prototype Reduce by Example\r\n\r\n```\r\n// Try ES6 Examples\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}